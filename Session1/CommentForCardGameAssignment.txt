Yêu cầu bài toán:
- Tổng của 2 thẻ đầu không được vượt quá 7 (<= 7).
- Giá trị của thẻ thứ 3 được suy ra từ 2 thẻ đầu (= 7 - totalOf2PreviousCard).

Comment for code:
- Kiểu trả về của function choosingCard không cần là 1 array [random, cardRandom, arrayCard], chỉ nên trả về cardRandom là đủ vì:
	+) Trong code không dùng tới random của [random, cardRandom, arrayCard]
	+) Trả về biến arrayCard trong [random, cardRandom, arrayCard] không cần thiết vì có thể dùng thẳng array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "J", "Q", "K"]
- function chooseElement là không cần thiết vì Value truyền vào và giá trị trả ra của chooseElement chắc chắn giống nhau, có thể lấy thẳng Value để add vào array player.
				var lastcard = chooseElement(memory[2], result[2]);
                inputintoArray(lastcard, player);
			nên chuyển thành 
				inputintoArray(memory[2], player)

- Chú ý tên biến, tên hàm cần tuân thủ quy tắc camel, tên biến và tên hàm nên bắt đầu bằng ký tự viết thường chứ không phải chữ hoa
	+) inputintoArray(Element, Array) > inputIntoArray(element, array) 
	+) thirdcardvalue > thirdCardValue
	+) twocardsvalue > twoCardsValue
- Đoạn code random 2 cards đầu tiên:
	+) if (result[1] == "J" || result[1] == "Q" || result[1] == "K")  và if (result[1] <= 7) có thể gộp chung thành 1 logic thay vì lặp lại ở 2 logic khác nhau.
	có thể chuyển thành if (result[1] == "J" || result[1] == "Q" || result[1] == "K" || result[1] <= 7) 
	+) if (result[1] == "J" || result[1] == "Q" || result[1] == "K" || result[1] <= 7) 
	   if (result[1] > 7)
	   nên được viết thành 
	   if (result[1] == "J" || result[1] == "Q" || result[1] == "K" || result[1] <= 7) 
	   else if (result[1] > 7)
	   để tăng hiệu suất chương trình (chương trình không check logic thứ 2 nếu đã nhảy vào logic thứ nhất) và code dễ đọc hơn.
- Nếu thirdcardvalue != 0 thì thêm card cuối cùng = thirdcardvalue vào array player luôn và kết thúc chương trình, không cần thiết chạy vào dòng code inputintoArray(lastcard, player); (line 61).

- Dòng code inputintoArray(0, memory); (line 51) bị thừa.

- Cân nhắc việc sử dụng thêm array memory, vì có thể lấy ra được giá trị của card thông qua array player.

- Dòng code inputIntoArray(i, result); hơi vô nghĩa không dùng để làm gì cả.

- Nên dùng break; để thoát khỏi vòng lặp for cho tường mình chứ không nên gán i = 13; để thoát khỏi vòng lặp for.

- Khi thẻ thứ 2 và thẻ thứ 3 có cùng giá trị thì gây lỗi thẻ thứ 3 là undefined.

- Code after format as the following:

// Topic:: There is an array = [1,2,3,4,5,6,7,8,9,10, "J", "Q", "K"], the players will choose randomly 3 cards which are different each other. With J, Q, and K value equal to 0. Total must be equal to 7.

var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "J", "Q", "K"]
var player = [];
var count = 0;

function removeElement(a, element) {
    //console.log(`Start remove ${element} in ${a} ...`);
    var index = a.indexOf(element);
    if (index > -1) {
        a.splice(index, 1);
    }
    //console.log(`-- Remove ${element} in ${a} successfully.`);
}

function choosingCard(arrayCard) {
    // Using Math.floor(Math.random() *  Number) function to get randomly element in this array
    //console.log(`Starting choose card from ${arrayCard}`);
    var random = Math.floor(Math.random() * arrayCard.length);
    var cardRandom = arrayCard[random];
    //console.log(`With ${random} position, the value is ${arrayCard[random]}`);
    removeElement(arrayCard, arrayCard[random]);
    //console.log(`-- Choosing the card ${cardRandom} successfully.`);
    return cardRandom;
}

function getValueFromCard(card) {
    if (!isNaN(card))
        return card;
    else
        return 0;
}


function inputIntoArray(Element, Array) {
    //console.log(`Start input ${Element} into ${Array}`);
    Array.push(Element);
    //console.log(`-- Inputed ${Element} into the array ${Array} successfully.`);
    //console.log(Array);
    return Array;
}

try {
    for (var i = 1; i <= 13; i++) {
        //get the last card
        if (count === 2) {
            result = choosingCard(array);
            //this case was resolved
            if (result === "J" || result === "Q" || result === "K") {
                inputIntoArray(result, player);
                //console.log(`The player has third card with ${result[1]} value.`);
                //console.log(`The player have three cards: ${player}`);
                //console.log(`In order to choose three cards with total equal to 7. The server had worked ${result[3]} times.`);
                break;
            }
        } else if (count < 2) {
            result = choosingCard(array);
            if (result === "J" || result === "Q" || result === "K" || result <= 7) {
                //get the second card
                if (count === 1) {
                    //console.log(`The value of previous two cards: ${memory[0]} and ${result[1]}.`);
                    var twocardsvalue = getValueFromCard(player[0]) + getValueFromCard(result);
                    var thirdcardvalue = 7 - twocardsvalue;
                    if (thirdcardvalue >= 0) {
                        //console.log(`The value of thirdcard must be: ${thirdcardvalue}.`);
                        count++;
                        inputIntoArray(result, player);
                        if (thirdcardvalue > 0 && array.indexOf(thirdcardvalue) > -1) {
                            //if thirdcardvalue > 0, thirdcardvalue should be 1,2,3,4,5,6 so the third card should be 1,2,3,4,5,6
                            inputIntoArray(thirdcardvalue, player);
                            break;
                        }
                        //console.log(`The player has second card with ${memory[1]} value.`);
                    } else {
                        //console.log(`The server will choose again.`);
                    }
                } else if (count === 0) { //get the first card
                    count++;
                    inputIntoArray(result, player);
                    //console.log(`The player has first card with ${memory[0]} value.`);
                }
            } else if (result > 7) {
                //console.log(`The value of card ${result[1]} greater than 7. Server will choose again!!!`);
            }
        }
    }
    console.log(player);
} catch (errorMain) {
    //console.log(`Found the errors in this Script: ${errorMain}`);
}